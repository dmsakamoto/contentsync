const ContentParser = require('./content-parser');

/**
 * Utility functions for markdown conversion and README generation
 */

class ContentUtils extends ContentParser {
  /**
   * Convert content to markdown
   */
  convertToMarkdown(content, url, method = 'Smart') {
    let markdown = '';
    
    // Add metadata header
    markdown += `# ${this.extractTitleFromUrl(url)}\n\n`;
    markdown += `<!-- Content extracted from: ${url} -->\n`;
    markdown += `<!-- Extracted at: ${new Date().toISOString()} -->\n`;
    markdown += `<!-- Method: ${method} -->\n\n`;

    // Convert each content piece
    content.forEach(item => {
      if (item.selector) {
        markdown += `<!-- Selector: ${item.selector} -->\n`;
      }

      switch (item.type) {
        case 'heading':
          const level = parseInt(item.tag.charAt(1));
          const headingMark = '#'.repeat(level);
          markdown += `${headingMark} ${item.text}\n\n`;
          break;

        case 'paragraph':
          markdown += `${item.text}\n\n`;
          break;

        case 'list':
          item.items.forEach(itemText => {
            markdown += `- ${itemText}\n`;
          });
          markdown += '\n';
          break;

        case 'blockquote':
          markdown += `> ${item.text}\n\n`;
          break;

        case 'code':
          markdown += '```\n';
          markdown += item.text;
          markdown += '\n```\n\n';
          break;

        case 'div':
          markdown += `${item.text}\n\n`;
          break;
      }
    });

    return markdown;
  }

  /**
   * Extract title from URL
   */
  extractTitleFromUrl(url) {
    try {
      const urlObj = new URL(url);
      const hostname = urlObj.hostname.replace('www.', '');
      return hostname.charAt(0).toUpperCase() + hostname.slice(1);
    } catch (error) {
      return 'Extracted Content';
    }
  }

  /**
   * Create README content
   */
  createReadme(title, method, siteUrl = 'Unknown') {
    const methodDescription = method === 'HTTP' 
      ? 'HTTP Request (fast, lightweight)' 
      : 'Browser Automation (handles JavaScript)';

    return `# Smart Content Extractor - Extracted Content

**Source Site:** ${siteUrl}
**Page Title:** ${title}
**Extracted:** ${new Date().toISOString()}
**Method:** ${methodDescription}

## About This Content

This content was automatically extracted from the website using the Smart Content Extractor. The system automatically chose the best extraction method based on the website's structure.

## Files

- \`extracted-content.md\` - The main extracted content in Markdown format
- \`README.md\` - This file with extraction information

## Editing Instructions

1. Edit the content in \`extracted-content.md\`
2. Maintain the structure and formatting
3. The metadata comments at the top should not be removed
4. Save your changes

## Extraction Method Used

**${method} Extraction:**
${method === 'HTTP' 
  ? '- ✅ Fast and lightweight\n- ✅ No browser dependencies\n- ✅ Perfect for static websites\n- ❌ Cannot handle JavaScript-rendered content'
  : '- ✅ Handles JavaScript-heavy websites\n- ✅ Extracts dynamically loaded content\n- ✅ Works with React, Vue, Angular\n- ⚠️  Requires browser automation (slower)'
}

---
Generated by Smart Content Extractor
`;
  }
}

module.exports = ContentUtils;
